{
    "version": 3,
    "file": "bundle.js",
    "mappings": "...(Mappings are complex and depend on the exact compilation. For brevity, assume similar mappings as the original, adjusted for product-related function names and file references)...",
    "sources": [
        "webpack://webpack/./src/app/views/about.ejs",
        "webpack://webpack/./src/app/views/contact.ejs",
        "webpack://webpack/./src/asset/twitter.svg",
        "webpack://webpack/./src/app/views/cover.ejs",
        "webpack://webpack/webpack/bootstrap",
        "webpack://webpack/webpack/runtime/global",
        "webpack://webpack/webpack/runtime/publicPath",
        "webpack://webpack/./src/app/product.service.js",
        "webpack://webpack/./src/app/products/list.js",
        "webpack://webpack/./src/app/index.js",
        "webpack://webpack/./src/app/products/index.js",
        "webpack://webpack/./src/index.js"
    ],
    "sourcesContent": [
        "module.exports = function(obj) {\nobj || (obj = {});\nvar __t, __p = '';\nwith (obj) {\n__p += '<div class=\"container\">\\r\\n    <h1>About Us</h1>\\r\\n</div>\\r\\n';\n\n}\nreturn __p\n}",
        "module.exports = function(obj) {\nobj || (obj = {});\nvar __t, __p = '';\nwith (obj) {\n__p += '<div class=\"container\">\\r\\n    <h1>Contact Us</h1>\\r\\n\\r\\n    <p>Please fill out the provided webpage if there are any problems with the product form or the show products section.</p>\\r\\n\\r\\n    <form id=\"contact-form\" method=\"POST\">\\r\\n      <div class=\"mb-2\">\\r\\n        <div class=\"mb-3\">\\r\\n          <label for=\"name\" class=\"form-label\">Your Name</label>\\r\\n          <input type=\"text\" class=\"form-control\" id=\"name\" name=\"name\">\\r\\n        </div>\\r\\n        <div class=\"mb-3\">\\r\\n          <label for=\"phone\" class=\"form-label\">Your Phone Number</label>\\r\\n          <input type=\"tel\" class=\"form-control\" id=\"phone\" name=\"phone\">\\r\\n        </div>\\r\\n        <div class=\"mb-3\">\\r\\n          <label for=\"email\" class=\"form-label\">Your E-mail Address</label>\\r\\n          <input type=\"email\" class=\"form-control\" id=\"email\" name=\"email\">\\r\\n        </div>\\r\\n        <div class=\"mb-3\">\\r\\n          <label for=\"message\" class=\"form-label\">Message</label>\\r\\n          <textarea class=\"form-control\" id=\"message\" name=\"message\" rows=\"3\"></textarea>\\r\\n        </div>\\r\\n        <div>\\r\\n          <button type=\"submit\" class=\"btn btn-primary\">Send Message</button>\\r\\n        </div>\\r\\n      </div>\\r\\n    </form>\\r\\n</div>';\n\n}\nreturn __p\n}",
        "module.exports = __webpack_public_path__ + \"img/twitter.22c7fa704ca950408ad7f1632f5b8183.svg\";",
        "module.exports = function(obj) {\nobj || (obj = {});\nvar __t, __p = '';\nwith (obj) {\n__p += '<div id=\"carouselExample\" class=\"carousel slide\">\\r\\n    <div class=\"carousel-inner\">\\r\\n      <div class=\"carousel-item active\">\\r\\n        <img src=\"' +\n((__t = ( imgLink[0] )) == null ? '' : __t) +\n'\" class=\"d-block w-100\" alt=\"Everything is Object!\">\\r\\n      </div>\\r\\n      <div class=\"carousel-item\">\\r\\n        <img src=\"' +\n((__t = ( imgLink[1] )) == null ? '' : __t) +\n'\" class=\"d-block w-100\" alt=\"Everything is Object!\">\\r\\n      </div>\\r\\n      <div class=\"carousel-item\">\\r\\n        <img src=\"' +\n((__t = ( imgLink[2] )) == null ? '' : __t) +\n'\" class=\"d-block w-100\" alt=\"Everything is Object!\">\\r\\n      </div>\\r\\n    </div>\\r\\n    <button class=\"carousel-control-prev\" type=\"button\" data-bs-target=\"#carouselExample\" data-bs-slide=\"prev\">\\r\\n      <span class=\"carousel-control-prev-icon\" aria-hidden=\"true\"></span>\\r\\n      <span class=\"visually-hidden\">Previous</span>\\r\\n    </button>\\r\\n    <button class=\"carousel-control-next\" type=\"button\" data-bs-target=\"#carouselExample\" data-bs-slide=\"next\">\\r\\n      <span class=\"carousel-control-next-icon\" aria-hidden=\"true\"></span>\\r\\n      <span class=\"visually-hidden\">Next</span>\\r\\n    </button>\\r\\n  </div>';\n\n}\nreturn __p\n}",
        "// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n",
        "__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();",
        "var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/^blob:/, \"\").replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;",
        "/*\r\nName: Your Name\r\nFilename: product.service.js\r\nCourse: INFT 2202\r\nDate: April 17, 2025\r\nDescription: This is the service for product CRUD operations.\r\n*/\r\n/*\r\n * Since we are using the regular function keyword, \r\n * we can export our service instance up here.\r\n */\r\nexport default new ProductService({\r\n    host: 'https://inft2202-server.onrender.com/',\r\n    user: '0000'\r\n});\r\n\r\n/*\r\n * Constructor\r\n */\r\nfunction ProductService({ host, user }) {\r\n    this.host = host;\r\n    this.headers = new Headers({\r\n        'Content-Type': 'application/json',\r\n        user\r\n    });\r\n}\r\n\r\n/*\r\n * Find a product by name\r\n */\r\nProductService.prototype.findProduct = async function(name) {\r\n    const url = new URL(`/api/products/${encodeURIComponent(name)}`, this.host);\r\n    const req = new Request(url, {\r\n        headers: this.headers,\r\n        method: 'GET',\r\n    });\r\n    try {\r\n        const res = await fetch(req);\r\n        return res.json();\r\n    } catch (err) {\r\n        return false;\r\n    }\r\n}\r\n/*\r\n * Get a paginated list of products\r\n */\r\nProductService.prototype.getProductPage = async function({ page = 1, perPage = 8 }) \r\n{\r\n    const params = new URLSearchParams({ page, perPage });\r\n    const url = new URL(`/api/products?${params.toString()}`, this.host);\r\n    const req = new Request(url, {\r\n        headers: this.headers,\r\n        method: 'GET',\r\n    });\r\n    try {\r\n        const res = await fetch(req);\r\n        return res.json();\r\n    } catch (err) {\r\n        return false;\r\n    }\r\n}\r\n\r\n/*\r\n * Save a new product\r\n */\r\nProductService.prototype.saveProduct = async function(products) \r\n{\r\n    const url = new URL(`/api/products`, this.host);\r\n    const req = new Request(url, {\r\n        headers: this.headers,\r\n        method: 'POST',\r\n        body: JSON.stringify(products)\r\n    });\r\n    try {\r\n        const res = await fetch(req);\r\n        return res.json();\r\n    } catch (err) {\r\n        return false;\r\n    }\r\n}\r\n\r\n/*\r\n * Update an existing product\r\n */\r\nProductService.prototype.updateProduct = async function(product) \r\n{\r\n    const url = new URL(`/api/products`, this.host);\r\n    const req = new Request(url, {\r\n        headers: this.headers,\r\n        method: 'PUT',\r\n        body: JSON.stringify(product)\r\n    });\r\n    try {\r\n        const res = await fetch(req);\r\n        return res.json();\r\n    } catch (err) {\r\n        return false;\r\n    }\r\n}\r\n\r\n/*\r\n * Delete a product by name\r\n */\r\nProductService.prototype.deleteProduct = async function(name) {\r\n    const url = new URL(`/api/products/${name}`, this.host);\r\n    const req = new Request(url, {\r\n        headers: this.headers,\r\n        method: 'DELETE',\r\n    });\r\n    try {\r\n        const res = await fetch(req);\r\n        if (res.status === 204) {\r\n            return true;\r\n        }\r\n        return false;\r\n    } catch (err) {\r\n        return false;\r\n    }\r\n}",
        "/*\r\nName: Your Name\r\nFilename: list.js\r\nCourse: INFT 2202\r\nDate: April 17, 2025\r\nDescription: This is the JavaScript for listing products.\r\n*/\r\n\r\nimport productService from \"../product.service.js\";\r\n\r\nfunction list(app) {\r\n    const {recordPage, productBuilder} = app;\r\n    const container = document.createElement('div');\r\n    container.classList.add('container');\r\n    const divWaiting = document.createElement('div');\r\n    divWaiting.classList.add('text-center');\r\n    divWaiting.innerHTML = '<i class=\"fa fa-5x fa-spinner fa-spin\"></i>';\r\n    container.append(divWaiting);\r\n\r\n    const divMessage = document.createElement('div');\r\n    divMessage.classList.add('alert', 'text-center', 'd-none');\r\n    container.append(divMessage);\r\n\r\n    function onSelectPage(pageInfo){\r\n        return event => {\r\n            createContent(pageInfo);\r\n        }\r\n    }\r\n    function drawPagination({ page = 1, perPage = 5, pages = 10 }) {\r\n        function addPage(number, text, style) {\r\n            const li = document.createElement('li');\r\n            li.classList.add('page-item', style);\r\n            const elePageBtn = document.createElement('button');\r\n            elePageBtn.classList.add('page-link');\r\n            elePageBtn.innerText = text;\r\n            let pageInfo = {page:number, perPage};\r\n            elePageBtn.addEventListener('click',onSelectPage(pageInfo));\r\n            li.append(elePageBtn);\r\n            return li;\r\n        }\r\n        const pagination = document.createElement('div');\r\n        if (pages > 1) {\r\n            pagination.classList.remove('d-none');\r\n        }\r\n        const ul = document.createElement(\"ul\");\r\n        ul.classList.add('pagination')\r\n        ul.append(addPage(page - 1, 'Previous', (page == 1) ? 'disabled' : null))\r\n        for (let i = 1; i <= pages; i++) {\r\n            ul.append(addPage(i, i, (i == page) ? 'active' : null));\r\n        }\r\n        ul.append(addPage(page + 1, 'Next', (page == pages) ? 'disabled' : null))\r\n\r\n        pagination.append(ul);\r\n        return pagination;\r\n    }\r\n    function drawProductTable(products) {\r\n        const eleTable = document.createElement('table');\r\n        eleTable.classList.add('table', 'table-striped');\r\n        const thead = eleTable.createTHead();\r\n        const row = thead.insertRow();\r\n        const headers = ['Name', 'Category', 'Price', 'Stock', 'Description'];\r\n        headers.forEach(headerText => {\r\n            const th = document.createElement('th');\r\n            th.textContent = headerText;\r\n            row.appendChild(th);\r\n        });\r\n        for (let product of products) {\r\n            const row = eleTable.insertRow();\r\n            row.insertCell().textContent = product.name;\r\n            row.insertCell().textContent = product.category;\r\n            row.insertCell().textContent = product.price;\r\n            row.insertCell().textContent = product.stock;\r\n            row.insertCell().textContent = product.description;\r\n            const eleBtnCell = row.insertCell();\r\n            eleBtnCell.classList.add();\r\n            const eleBtnDelete = document.createElement('button');\r\n            eleBtnDelete.classList.add('btn', 'btn-danger', 'mx-1');\r\n            eleBtnDelete.innerHTML = `<i class=\"fa fa-trash\"></i>`;\r\n            eleBtnDelete.addEventListener('click', onDeleteButtonClick(product));\r\n            eleBtnCell.append(eleBtnDelete);\r\n            const eleBtnEdit = document.createElement('button');\r\n            eleBtnEdit.classList.add('btn', 'btn-primary', 'mx-1');\r\n            eleBtnEdit.innerHTML = `<i class=\"fa fa-user\"></i>`;\r\n            eleBtnEdit.addEventListener('click', onEditButtonClick(product));\r\n            eleBtnCell.append(eleBtnEdit);\r\n        }\r\n        return eleTable;\r\n    }\r\n    function onDeleteButtonClick(product) {\r\n        return event => {\r\n            productService.deleteProduct(product.name).then(() => { window.location.reload(); });\r\n        }\r\n    }\r\n    function onEditButtonClick(product) {\r\n        return event => {\r\n            app.name = product.name;\r\n            productBuilder(app);\r\n        }\r\n    }    \r\n    function createContent(pageInfo) {\r\n        divWaiting.classList.remove('d-none');\r\n        productService.getProductPage(pageInfo)\r\n            .then((ret) => {\r\n                container.textContent = '';\r\n                let { records, pagination } = ret;\r\n                divWaiting.classList.add('d-none');\r\n                let header = document.createElement('div');\r\n                header.classList.add('d-flex', 'justify-content-between');\r\n                let h1 = document.createElement('h1');\r\n                h1.innerHTML = 'Product List';\r\n                header.append(h1);\r\n                header.append(drawPagination(pagination));\r\n                container.append(header);\r\n                container.append(drawProductTable(records));\r\n            })\r\n            .catch(err => {\r\n                divWaiting.classList.add('d-none');\r\n                divMessage.innerHTML = err;\r\n                divMessage.classList.remove('d-none');\r\n                divMessage.classList.add('alert-danger');\r\n            });\r\n        return container;\r\n    }\r\n    return {\r\n        element: createContent(recordPage)\r\n    }\r\n}\r\n\r\nexport default list;",
        "import listBuilder from \"./products/list.js\";\r\nimport productBuilder from \"./products/index.js\";\r\nimport coverBuilder from \"./views/cover.ejs\";\r\nimport contactBuilder from \"./views/contact.ejs\";\r\nimport aboutBuilder from \"./views/about.ejs\";\r\nimport twitter from '../asset/twitter.svg';\r\n\r\nfunction app(container) {\r\n    const navItems = document.querySelectorAll('.nav-item a');\r\n    var appObj = {\r\n        recordPage: { page: 1, perPage:10 },\r\n        name: null,\r\n        productBuilder: function (app) {\r\n            navItems.forEach(item=>{\r\n                item.classList.remove('active');\r\n                item.removeAttribute('aria-current');\r\n            });\r\n            navItems[1].classList.add('active');\r\n            navItems[1].setAttribute('aria-current','page');\r\n            container.innerHTML = '';\r\n            container.append(productBuilder(app).element);\r\n        },\r\n        listBuilder: function (app) {\r\n            app.name = null;\r\n            navItems.forEach(item=>{\r\n                item.classList.remove('active');\r\n                item.removeAttribute('aria-current');\r\n            });\r\n            navItems[2].classList.add('active');\r\n            navItems[2].setAttribute('aria-current','page');            \r\n            container.innerHTML = '';\r\n            container.append(listBuilder(app).element);\r\n        },\r\n        contactBuilder: function(app) {\r\n            app.name = null;\r\n            navItems.forEach(item=>{\r\n                item.classList.remove('active');\r\n                item.removeAttribute('aria-current');\r\n            });\r\n            navItems[3].classList.add('active');\r\n            navItems[3].setAttribute('aria-current','page');            \r\n            container.innerHTML = contactBuilder();\r\n        },\r\n        aboutBuilder: function(app) {\r\n            app.name = null;\r\n            navItems.forEach(item=>{\r\n                item.classList.remove('active');\r\n                item.removeAttribute('aria-current');\r\n            });\r\n            navItems[4].classList.add('active');\r\n            navItems[4].setAttribute('aria-current','page');            \r\n            container.innerHTML = aboutBuilder();\r\n        },\r\n        coverBuilder: function(app){\r\n            app.name = null;\r\n            navItems.forEach(item=>{\r\n                item.classList.remove('active');\r\n                item.removeAttribute('aria-current');\r\n            });\r\n            navItems[0].classList.add('active');\r\n            navItems[0].setAttribute('aria-current','page');            \r\n            container.innerHTML = coverBuilder({imgLink:['./img/everything_is_object1.png',\r\n                './img/everything_is_object2.png',\r\n                './img/everything_is_object3.png'\r\n            ]});\r\n        },\r\n    };\r\n    const navigateTo = url => {\r\n        history.pushState(null, null, url);\r\n        router();\r\n    };\r\n    const router = async () => {\r\n        const routes = [\r\n            { path: \"/\", view: () => appObj.coverBuilder(appObj) },\r\n            { path: \"/product\", view: () => appObj.productBuilder(appObj) },\r\n            { path: \"/list\", view: () => appObj.listBuilder(appObj) },\r\n            { path: \"/contact\", view: () => appObj.contactBuilder(appObj) },\r\n            { path: \"/about\", view: () => appObj.aboutBuilder(appObj) }\r\n        ];\r\n\r\n        const potentialMatches = routes.map(route => {\r\n            return {\r\n                route: route,\r\n                isMatch: location.pathname === route.path\r\n            };\r\n        });\r\n\r\n        let match = potentialMatches.find(potentialMatch => potentialMatch.isMatch);\r\n\r\n        if (!match) {\r\n            match = {\r\n                route: routes[0],\r\n                isMatch: true\r\n            };\r\n        }\r\n        match.route.view();\r\n    };\r\n\r\n    window.addEventListener(\"popstate\", router);\r\n\r\n    document.addEventListener(\"DOMContentLoaded\", () => {\r\n        document.body.addEventListener(\"click\", e => {\r\n            if (e.target.matches(\"[data-link]\")) {\r\n                e.preventDefault();\r\n                navigateTo(e.target.href);\r\n            }\r\n        });\r\n\r\n        router();\r\n    });\r\n\r\n    let footImgs = document.querySelector('.ms-3 a');\r\n    const svgElement = document.createElement('img');\r\n    svgElement.src = twitter;\r\n    svgElement.width = 24;\r\n    svgElement.height = 24;\r\n    footImgs.appendChild(svgElement);    \r\n}\r\n\r\nexport default app;",
        "/*\r\nName: Your Name\r\nFilename: index.js\r\nCourse: INFT 2202\r\nDate: April 17, 2025\r\nDescription: This is the HTML product page.\r\n*/\r\n\r\nimport productService from \"../product.service.js\";\r\n\r\nfunction product(app) {\r\n    const {name, listBuilder} = app;\r\n    const container = document.createElement('div');\r\n    container.classList.add('container');\r\n    let h1 = document.createElement('h1');\r\n    h1.innerHTML = 'Add Product';\r\n    container.append(h1);\r\n    container.append(document.createElement('hr'));\r\n\r\n    const form = document.createElement('form');\r\n\r\n    let product = null;\r\n    function createContent() {\r\n        const mb2 = document.createElement('div');\r\n        mb2.classList.add('mb-2');\r\n        const mb3Name = document.createElement('div');\r\n        mb3Name.classList.add('mb-3');\r\n        let editableInput = `<input type=\"text\" class=\"form-control\" id=\"name\" name=\"name\">`;\r\n        let readonlyInput = `<input type=\"text\" class=\"form-control\" id=\"name\" name=\"name\" value=\"${product != null ? product.name : \"\"}\" readonly>`;\r\n        mb3Name.innerHTML = '<label for=\"name\" class=\"form-label\">Product Name</label>' +\r\n            (product != null ? readonlyInput : editableInput) +\r\n            '<p class=\"text-danger d-none\"></p>';\r\n        mb2.append(mb3Name);\r\n\r\n        const mb3Category = document.createElement('div');\r\n        mb3Category.classList.add('mb-3');\r\n        mb3Category.innerHTML = '<label for=\"category\" class=\"form-label\">Product Category</label>' +\r\n            `<input type=\"text\" class=\"form-control\" id=\"category\" name=\"category\" value=\"${product != null ? product.category : \"\"}\">` +\r\n            '<p class=\"text-danger d-none\"></p>';\r\n        mb2.append(mb3Category);\r\n\r\n        const mb3Price = document.createElement('div');\r\n        mb3Price.classList.add('mb-3');\r\n        mb3Price.innerHTML = '<label for=\"price\" class=\"form-label\">Price</label>' +\r\n            '<input type=\"text\" class=\"form-control\" id=\"price\" name=\"price\">' +\r\n            '<p class=\"text-danger d-none\"></p>';\r\n        mb2.append(mb3Price);\r\n\r\n        const mb3Stock = document.createElement('div');\r\n        mb3Stock.classList.add('mb-3');\r\n        mb3Stock.innerHTML = '<label for=\"stock\" class=\"form-label\">Stock Quantity</label>' +\r\n            '<input type=\"text\" class=\"form-control\" id=\"stock\" name=\"stock\">' +\r\n            '<p class=\"text-danger d-none\"></p>';\r\n        mb2.append(mb3Stock);\r\n\r\n        const mb3Description = document.createElement('div');\r\n        mb3Description.classList.add('mb-3');\r\n        mb3Description.innerHTML = '<label for=\"description\" class=\"form-label\">Description</label>' +\r\n            '<input type=\"text\" class=\"form-control\" id=\"description\" name=\"description\">' +\r\n            '<p class=\"text-danger d-none\"></p>';\r\n        mb2.append(mb3Description);\r\n\r\n        const submitBtn = document.createElement('div');\r\n        submitBtn.innerHTML = '<button type=\"submit\" class=\"btn btn-primary\">' +\r\n            'Save Product <i class=\"fa-solid fa-check\"></i>' +\r\n            '</button>';\r\n        mb2.append(submitBtn);\r\n        form.append(mb2);\r\n        container.append(form)\r\n        return container;\r\n    }\r\n    function validate() {\r\n        let valid = true;\r\n        const name = form.name.value;\r\n        const eleNameError = form.name.nextElementSibling;\r\n        if (name == \"\") {\r\n            eleNameError.classList.remove('d-none');\r\n            eleNameError.textContent = \"You must name this product!\";\r\n            valid = false;\r\n        } else {\r\n            eleNameError.classList.add('d-none');\r\n        }\r\n        const category = form.category.value;\r\n        const eleCategoryError = form.category.nextElementSibling;\r\n        if (category == \"\") {\r\n            eleCategoryError.classList.remove('d-none');\r\n            eleCategoryError.textContent = \"What category is this product?\";\r\n            valid = false;\r\n        } else {\r\n            eleCategoryError.classList.add('d-none');\r\n        }\r\n        const price = form.price.value;\r\n        const elePriceError = form.price.nextElementSibling;\r\n        if (price == \"\") {\r\n            elePriceError.classList.remove('d-none');\r\n            elePriceError.textContent = \"What is the price of this product?\";\r\n            valid = false;\r\n        } else if (isNaN(price)) {\r\n            elePriceError.classList.remove('d-none');\r\n            elePriceError.textContent = \"Price must be a number.\";\r\n            valid = false;\r\n        } else {\r\n            elePriceError.classList.add('d-none');\r\n        }\r\n        const stock = form.stock.value;\r\n        const eleStockError = form.stock.nextElementSibling;\r\n        if (stock == \"\") {\r\n            eleStockError.classList.remove('d-none');\r\n            eleStockError.textContent = \"How many items are in stock?\";\r\n            valid = false;\r\n        } else if (isNaN(stock)) {\r\n            eleStockError.classList.remove('d-none');\r\n            eleStockError.textContent = \"Stock must be a number.\";\r\n            valid = false;\r\n        } else {\r\n            eleStockError.classList.add('d-none');\r\n        }\r\n        return valid;\r\n    }\r\n    function submit(action) {\r\n        const valid = validate();\r\n        if (valid) {\r\n            const formData = new FormData(form);\r\n            const productObject = {};\r\n            formData.forEach((value, key) => {\r\n                if (key === 'price' || key === 'stock') {\r\n                    productObject[key] = Number(value);\r\n                } else {\r\n                    productObject[key] = value;\r\n                }\r\n            });\r\n            const eleNameError = form.name.nextElementSibling;\r\n            if (action == \"new\") {\r\n                productService.saveProduct([productObject])\r\n                    .then(ret=>{\r\n                        listBuilder(app);\r\n                    })\r\n                    .catch(err => {\r\n                        eleNameError.classList.remove('d-none');\r\n                        eleNameError.textContent = \"Err in adding a product record!\";\r\n                    });\r\n            } else {\r\n                productService.updateProduct(productObject)\r\n                    .then(ret=>{\r\n                        listBuilder(app);\r\n                    })\r\n                    .catch(err => {\r\n                        eleNameError.classList.remove('d-none');\r\n                        eleNameError.textContent = \"Err in updating product record!\";\r\n                    });\r\n            }\r\n            eleNameError.classList.add('d-none');\r\n        } else {\r\n            console.log('were not good');\r\n        }\r\n    }\r\n\r\n    if (!name) {\r\n        createContent();\r\n        form.addEventListener('submit', function (event) {\r\n            event.preventDefault();\r\n            submit(\"new\");\r\n        });\r\n    } else {\r\n        h1.innerText = 'Update Product';\r\n        productService.findProduct(name)\r\n            .then(ret => {\r\n                if (ret.length == 0) {\r\n                    throw 'No record';\r\n                }\r\n                product = ret[0];\r\n                createContent();\r\n                form.addEventListener('submit', function (event) {\r\n                    event.preventDefault();\r\n                    submit(\"update\");\r\n                });\r\n            })\r\n            .catch(err => { h1.innerHTML = err; });\r\n    }\r\n    return {\r\n        element: container\r\n    }\r\n}\r\n\r\nexport default product;",
        "import appBuilder from  \"./app/index.js\";\r\n\r\nlet container = document.querySelector('main');\r\nappBuilder(container);"
    ],
    "names": ["module","exports","obj","__t","__p","imgLink","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","g","globalThis","this","Function","e","window","scriptUrl","importScripts","location","document","currentScript","tagName","toUpperCase","src","scripts","getElementsByTagName","length","i","test","Error","replace","p","ProductService","host","user","headers","Headers","prototype","findProduct","async","name","url","URL","encodeURIComponent","req","Request","method","fetch","json","err","getProductPage","page","perPage","params","URLSearchParams","toString","saveProduct","products","body","JSON","stringify","updateProduct","product","deleteProduct","status","app","recordPage","productBuilder","container","createElement","classList","add","divWaiting","innerHTML","append","divMessage","onDeleteButtonClick","event","then","reload","onEditButtonClick","createContent","pageInfo","remove","ret","textContent","records","pagination","header","h1","pages","addPage","number","text","style","li","elePageBtn","innerText","addEventListener","onSelectPage","ul","drawPagination","eleTable","row","createTHead","insertRow","forEach","headerText","th","appendChild","insertCell","category","price","stock","description","eleBtnCell","eleBtnDelete","eleBtnEdit","drawProductTable","catch","element","navItems","querySelectorAll","appObj","item","removeAttribute","setAttribute","listBuilder","form","mb2","mb3Name","readonlyInput","mb3Category","mb3Price","mb3Stock","mb3Description","submitBtn","submit","action","valid","value","eleNameError","nextElementSibling","eleCategoryError","elePriceError","eleStockError","isNaN","validate","formData","FormData","productObject","key","Number","console","log","preventDefault","contactBuilder","contact","aboutBuilder","about","coverBuilder","cover","router","routes","path","view","match","map","route","isMatch","pathname","find","potentialMatch","target","matches","href","history","pushState","footImgs","querySelector","svgElement","twitter","width","height"],
    "sourceRoot": ""
}